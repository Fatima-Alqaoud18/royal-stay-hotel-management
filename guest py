# loyalty_status.py
from enum import Enum

class LoyaltyStatus(Enum):
    """Defines the status of a guest's loyalty membership."""
    NONE = "None"      # No loyalty membership
    ACTIVE = "Active"  # Active loyalty membership
    INACTIVE = "Inactive"  # Inactive loyalty membership
    GOLD = "Gold"      # Gold-tier loyalty membership
# guest.py

class Guest:
    """
    Represents a guest at the Royal Stay Hotel.

    Attributes:
        guest_id (str): Unique identifier for the guest.
        name (str): Guest's full name.
        email (str): Guest's email.
        phone (str): Guest's phone number.
        loyalty_status (LoyaltyStatus): Guest's loyalty status (using the LoyaltyStatus Enum).
    """

    def __init__(self, guest_id, name, email, phone, loyalty_status=LoyaltyStatus.NONE):
        # Initialize the guest with the provided details
        self.__guest_id = guest_id
        self.__name = name
        self.__email = email
        self.__phone = phone
        self.__loyalty_status = loyalty_status

    def __setattr__(self, key, value):
        """Enforce rules for setting attributes."""
        if key in ["_Guest__name", "_Guest__email", "_Guest__phone"]:
            if not isinstance(value, str) or not value.strip():
                raise ValueError(f"{key} must be a non-empty string.")
        elif key == "_Guest__loyalty_status":
            if not isinstance(value, LoyaltyStatus):
                raise ValueError("Loyalty status must be a valid LoyaltyStatus enum.")
        super().__setattr__(key, value)

    # Getter Methods
    def get_guest_id(self):
        return self.__guest_id

    def get_name(self):
        return self.__name

    def get_email(self):
        return self.__email

    def get_phone(self):
        return self.__phone

    def get_loyalty_status(self):
        return self.__loyalty_status

    # Setter Methods
    def set_guest_id(self, guest_id):
        self.__guest_id = guest_id

    def set_name(self, name):
        if isinstance(name, str) and name.strip():
            self.__name = name
        else:
            raise ValueError("Name must be a non-empty string.")

    def set_email(self, email):
        if isinstance(email, str) and "@" in email:
            self.__email = email
        else:
            raise ValueError("Invalid email address.")

    def set_phone(self, phone):
        if isinstance(phone, str) and phone.strip():
            self.__phone = phone
        else:
            raise ValueError("Phone number must be a non-empty string.")

    def set_loyalty_status(self, status):
        if isinstance(status, LoyaltyStatus):
            self.__loyalty_status = status
        else:
            raise ValueError("Invalid loyalty status.")

    def __str__(self):
        """Returns a string representation of the guest."""
        return f"Guest ID: {self.__guest_id} | Name: {self.__name} | Email: {self.__email} | Phone: {self.__phone} | Loyalty Status: {self.__loyalty_status.value}"

# Testing the Guest Class
if __name__ == "__main__":
    guest1 = Guest("G001", "Fatima Alqaoud", "fatima@gmail.com", "1234567890", LoyaltyStatus.ACTIVE)
    print(guest1)  # Test output to check Guest details
    guest1.set_phone("987654321")  # Update phone number
    print("Updated Phone:", guest1.get_phone())  # Test the updated phone number
    guest1.set_loyalty_status(LoyaltyStatus.GOLD)  # Update loyalty status
    print("Updated Loyalty Status:", guest1.get_loyalty_status().value)  # Test updated loyalty status
